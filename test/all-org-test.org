* Setup

#+BEGIN_SRC emacs-lisp :results silent
(add-to-list 'org-structure-template-alist
	     '("elt" "#+BEGIN_SRC emacs-lisp :test\n?\n#+END_SRC"
	       "<src lang=\"emacs-lisp\">\n?\n</src>"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(org-ert-tangle "all-org-test.el")
(find-file "all-org-test.el")
(lispy--indent-region (point-min) (point-max))
(save-buffer)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
;(require 'org-ert)
(load-file "org-ert.el")
(load-file "org-test-setup.el")
(org-ert-run-tests)
#+END_SRC

#+RESULTS:
| [[elisp:(org-babel-goto-nth-test-block 1)][or-split-key-1]]    | t |
| [[elisp:(org-babel-goto-nth-test-block 2)][or-split-key-2]]    | t |
| [[elisp:(org-babel-goto-nth-test-block 3)][or-key-file-p]]     | t |
| [[elisp:(org-babel-goto-nth-test-block 4)][or-key-file-p-nil]] | t |
| [[elisp:(org-babel-goto-nth-test-block 5)][swap-1]]            | t |
| [[elisp:(org-babel-goto-nth-test-block 6)][swap-2]]            | t |
| [[elisp:(org-babel-goto-nth-test-block 7)][orfb-3]]            | t |
| [[elisp:(org-babel-goto-nth-test-block 8)][orfb-3a]]           | t |
| [[elisp:(org-babel-goto-nth-test-block 9)][unique-keys]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 10)][unique-keys-sort]]  | t |
| [[elisp:(org-babel-goto-nth-test-block 11)][short-titles]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 12)][long-titles]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 13)][title-case-1]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 14)][title-case-2]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 15)][title-case-3]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 16)][title-case-4]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 17)][sentence-case-1]]   | t |
| [[elisp:(org-babel-goto-nth-test-block 18)][sentence-case-2]]   | t |
| [[elisp:(org-babel-goto-nth-test-block 19)][stringify]]         | t |
| [[elisp:(org-babel-goto-nth-test-block 20)][next-entry-1]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 21)][prev-entry-1]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 22)][get-bibtex-keys]]   | t |
| [[elisp:(org-babel-goto-nth-test-block 23)][set-bibtex-keys]]   | t |
| [[elisp:(org-babel-goto-nth-test-block 24)][clean-year-1]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 25)][clean-year-2]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 26)][clean-&]]           | t |
| [[elisp:(org-babel-goto-nth-test-block 27)][clean-comma]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 28)][clean-pages-1]]     | t |
| [[elisp:(org-babel-goto-nth-test-block 29)][clean-doi-1]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 30)][bib-1]]             | t |
| [[elisp:(org-babel-goto-nth-test-block 31)][bib-1a]]            | t |
| [[elisp:(org-babel-goto-nth-test-block 32)][bib-2]]             | t |
| [[elisp:(org-babel-goto-nth-test-block 33)][bad-ref]]           | t |
| [[elisp:(org-babel-goto-nth-test-block 34)][bad-file-link]]     | t |
| [[elisp:(org-babel-goto-nth-test-block 35)][sort-by-year]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 36)][cite-export-1]]     | t |
| [[elisp:(org-babel-goto-nth-test-block 37)][cite-export-2]]     | t |
| [[elisp:(org-babel-goto-nth-test-block 38)][cite-export-3]]     | t |
| [[elisp:(org-babel-goto-nth-test-block 39)][label-export-1]]    | t |
| [[elisp:(org-babel-goto-nth-test-block 40)][ref-export-1]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 41)][curly-1]]           | t |
| [[elisp:(org-babel-goto-nth-test-block 42)][curly-2]]           | t |
| [[elisp:(org-babel-goto-nth-test-block 43)][curly-3]]           | t |
| [[elisp:(org-babel-goto-nth-test-block 44)][fl-next-cite]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 45)][cite-face-1]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 46)][cite-face-2]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 47)][cite-in-comment]]   | t |
| [[elisp:(org-babel-goto-nth-test-block 48)][fl-next-ref]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 49)][fl-next-label]]     | t |
| [[elisp:(org-babel-goto-nth-test-block 50)][label-face]]        | t |
| [[elisp:(org-babel-goto-nth-test-block 51)][fl-next-bib]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 52)][fl-next-bibstyle]]  | t |



* Reminders about code blocks

(org-babel-get-src-block-info)
Returns a list
 (language body header-arguments-alist switches name indent block-head).

Getting the language
#+BEGIN_SRC emacs-lisp
(nth 0 (org-babel-get-src-block-info))
#+END_SRC

#+RESULTS:
: emacs-lisp

The body
#+BEGIN_SRC emacs-lisp
(nth 1 (org-babel-get-src-block-info))
#+END_SRC

#+RESULTS:
: (nth 1 (org-babel-get-src-block-info))

header-arguments
#+BEGIN_SRC emacs-lisp
(nth 2 (org-babel-get-src-block-info))
#+END_SRC

#+RESULTS:
: ((:colname-names) (:rowname-names) (:result-params replace) (:result-type . value) (:comments . ) (:shebang . ) (:cache . no) (:padline . ) (:noweb . no) (:tangle . no) (:exports . code) (:results . replace) (:test . ignore) (:hlines . no) (:session . none))

Name
#+name: yepper
#+BEGIN_SRC emacs-lisp
(nth 4 (org-babel-get-src-block-info))
#+END_SRC

#+RESULTS: yepper
: yepper

#+RESULTS:

Is it a test? If this returns non-nil,
#+BEGIN_SRC emacs-lisp
(and (assoc :test (nth 2 (org-babel-get-src-block-info)))
     (not (string= "ignore" (cdr (assoc :test (nth 2 (org-babel-get-src-block-info)))))))
#+END_SRC

#+RESULTS:
: t

* Basic tests

#+name: or-split-key-1
#+BEGIN_SRC emacs-lisp :test
(should
   (equal
    (org-ref-split-and-strip-string " key1,key2 ")
    '("key1" "key2")))
#+END_SRC

#+RESULTS: or-split-key-1
: t








#+name: or-split-key-2
#+BEGIN_SRC emacs-lisp :test
"Check if keys are split correctly"
(should
 (equal
  (org-ref-split-and-strip-string " key1 ")
  '("key1")))
#+END_SRC

#+RESULTS: or-split-key-2
: t








#+name: or-key-file-p
#+BEGIN_SRC emacs-lisp :test
"Check `org-ref-key-in-file-p'"
(should
 (not
  (null
   (org-ref-key-in-file-p "kitchin-2015-examp"
			  (expand-file-name
			   "tests/test-1.bib"
			   (file-name-directory (locate-library "org-ref")))))))
#+END_SRC

#+RESULTS: or-key-file-p
: t







#+name: or-key-file-p-nil
#+BEGIN_SRC emacs-lisp :test
"Check `org-ref-key-in-file-p' for non-existent key"
(should
 (null
  (org-ref-key-in-file-p "bad-key"
			 (expand-file-name
			  "tests/test-1.bib"
			  (file-name-directory (locate-library "org-ref"))))))
#+END_SRC

#+RESULTS: or-key-file-p-nil
: t





#+name: swap-1
#+BEGIN_SRC emacs-lisp :test
"org swap test"
(should
 (equal
  '(b a)
  (org-ref-swap-list-elements 0 1 '(a b))))
#+END_SRC

#+RESULTS: swap-1
: t









#+name: swap-2
#+BEGIN_SRC emacs-lisp :test
"org swap test"
(should
 (equal
  '(a c b)
  (org-ref-swap-list-elements 1 2 '(a b c))))
#+END_SRC

#+RESULTS: swap-2
: t







* Get bibliography


#+name: orfb-3
#+BEGIN_SRC emacs-lisp :test
"addbibresource form of bibliography."
(should
 (equal
    (list (expand-file-name
	   "tests/test-1.bib"
	   (file-name-directory
	    (locate-library "org-ref"))))
    (mapcar 'file-truename
	    (org-test-with-temp-text
		(format "\\addbibresource{%s}"
			  (expand-file-name
			   "tests/test-1.bib"
			   (file-name-directory
			    (locate-library "org-ref"))))
	      (org-ref-find-bibliography)))))
#+END_SRC

#+RESULTS: orfb-3
: t








#+name: orfb-3a
#+BEGIN_SRC emacs-lisp :test
"multiple bibliographies addbibresource form of bibliography."
(should
 (equal
  (list (expand-file-name
	 "tests/test-1.bib"
	 (file-name-directory
	  (locate-library "org-ref")))
	(expand-file-name
	 "tests/test-2.bib"
	 (file-name-directory
	  (locate-library "org-ref"))))
  (org-test-with-temp-text
      (format "\\addbibresource{%s}
\\addbibresource{%s}"
	      (expand-file-name
	       "tests/test-1.bib"
	       (file-name-directory
		(locate-library "org-ref")))
	      (expand-file-name
	       "tests/test-2.bib"
	       (file-name-directory
		(locate-library "org-ref"))))
    (org-ref-find-bibliography))))
#+END_SRC

#+RESULTS: orfb-3a
: t






#+name: unique-keys
#+BEGIN_SRC emacs-lisp :test
(should
   (equal '("kitchin-2008-alloy" "kitchin-2004-role")
	  (org-test-with-temp-text
	      "cite:kitchin-2008-alloy,kitchin-2004-role

cite:kitchin-2004-role

bibliography:tests/test-1.bib
"
	    (org-ref-get-bibtex-keys))))
#+END_SRC

#+RESULTS: unique-keys
: t









#+name: unique-keys-sort
#+BEGIN_SRC emacs-lisp :test
(should
   (equal '("kitchin-2004-role" "kitchin-2008-alloy")
	  (org-test-with-temp-text
	      "cite:kitchin-2008-alloy,kitchin-2004-role

cite:kitchin-2004-role

bibliography:tests/test-1.bib
"
	    (org-ref-get-bibtex-keys t))))
#+END_SRC

#+RESULTS: unique-keys-sort
: t






* Bibtex tests

#+name: short-titles
#+BEGIN_SRC emacs-lisp :test
(org-ref-bibtex-generate-shorttitles)
(prog1
    (should
     (file-exists-p "shorttitles.bib"))
  (delete-file "shorttitles.bib"))
#+END_SRC

#+RESULTS: short-titles
: t








#+name: long-titles
#+BEGIN_SRC emacs-lisp :test
(org-ref-bibtex-generate-longtitles)

(prog1
    (should
     (file-exists-p "longtitles.bib"))
  (delete-file "longtitles.bib"))
#+END_SRC

#+RESULTS: long-titles
: t










** Changing the case of titles

#+name: title-case-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "Examples of Effective Data Sharing"
    (with-temp-buffer
      (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of effective data sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (org-ref-title-case-article)
      (bibtex-autokey-get-field "title"))))
#+END_SRC

#+RESULTS: title-case-1
: t









#+name: title-case-2
#+BEGIN_SRC emacs-lisp :test
(should (string=
	   "Examples of Effective Data-Sharing"
	   (with-temp-buffer
	     (bibtex-mode)
	     (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	     (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of effective data-sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
	     (goto-char (point-min))
	     (org-ref-title-case-article)
	     (bibtex-autokey-get-field "title"))))
#+END_SRC

#+RESULTS: title-case-2
: t








#+name: title-case-3
#+BEGIN_SRC emacs-lisp :test
(should (string=
	   "An Example of Effective Data-Sharing"
	   (with-temp-buffer
	     (bibtex-mode)
	     (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	     (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {An example of effective data-sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
	     (goto-char (point-min))
	     (org-ref-title-case-article)
	     (bibtex-autokey-get-field "title"))))
#+END_SRC

#+RESULTS: title-case-3
: t












#+name: title-case-4
#+BEGIN_SRC emacs-lisp :test
(should (string=
	 "An Example of Effective Data-Sharing"
	 (with-temp-buffer
	   (bibtex-mode)
	   (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	   (insert "@book{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {An example of effective data-sharing},
  publisher = {Awesome Publishing},
  year =	 2015,
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
}")
	   (goto-char (point-min))
	   (let ((org-ref-title-case-types '(("book" "title"))))
	     (org-ref-title-case))
	   (bibtex-autokey-get-field "title"))))
#+END_SRC

#+RESULTS: title-case-4
: t
















#+name: sentence-case-1
#+BEGIN_SRC emacs-lisp :test
(should (string=
	   "Examples of effective data sharing"
	   (with-temp-buffer
	     (bibtex-mode)
	     (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	     (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of Effective Data Sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
	     (goto-char (point-min))
	     (org-ref-sentence-case-article)
	     (bibtex-autokey-get-field "title"))))
#+END_SRC

#+RESULTS: sentence-case-1
: t



















#+name: sentence-case-2
#+BEGIN_SRC emacs-lisp :test
(should (string=
	   "Effective data sharing: A study"
	   (with-temp-buffer
	     (bibtex-mode)
	     (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	     (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Effective Data Sharing: A study},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
	     (goto-char (point-min))
	     (org-ref-sentence-case-article)
	     (bibtex-autokey-get-field "title"))))
#+END_SRC

#+RESULTS: sentence-case-2
: t









** Convert journal title to string
#+name: stringify
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "JCP"
    (with-temp-buffer
      (insert "@article{xu-2015-relat,
  author =	 {Zhongnan Xu and John R. Kitchin},
  title =	 {Relationships Between the Surface Electronic and Chemical
                  Properties of Doped 4d and 5d Late Transition Metal Dioxides},
  keywords =	 {orgmode},
  journal =	 {The Journal of Chemical Physics},
  volume =	 142,
  number =	 10,
  pages =	 104703,
  year =	 2015,
  doi =		 {10.1063/1.4914093},
  url =		 {http://dx.doi.org/10.1063/1.4914093},
  date_added =	 {Sat Oct 24 10:57:22 2015},
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (org-ref-stringify-journal-name)
      (bibtex-autokey-get-field "journal"))))
#+END_SRC

#+RESULTS: stringify
: t








** next/previous bibtex entries
#+name: next-entry-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "@article{xu-2015-relat,"
    (with-temp-buffer
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of Effective Data Sharing in Scientific Publishing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}

@article{xu-2015-relat,
  author =	 {Zhongnan Xu and John R. Kitchin},
  title =	 {Relationships Between the Surface Electronic and Chemical
                  Properties of Doped 4d and 5d Late Transition Metal Dioxides},
  keywords =	 {orgmode},
  journal =	 {The Journal of Chemical Physics},
  volume =	 142,
  number =	 10,
  pages =	 104703,
  year =	 2015,
  doi =		 {10.1063/1.4914093},
  url =		 {http://dx.doi.org/10.1063/1.4914093},
  date_added =	 {Sat Oct 24 10:57:22 2015},
}

")
      (goto-char (point-min))
      (org-ref-bibtex-next-entry)
      (buffer-substring (line-beginning-position) (line-end-position)))))
#+END_SRC

#+RESULTS: next-entry-1
: t









#+name: prev-entry-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "@article{kitchin-2015-examp,"
    (with-temp-buffer
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of Effective Data Sharing in Scientific Publishing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}

@article{xu-2015-relat,
  author =	 {Zhongnan Xu and John R. Kitchin},
  title =	 {Relationships Between the Surface Electronic and Chemical
                  Properties of Doped 4d and 5d Late Transition Metal Dioxides},
  keywords =	 {orgmode},
  journal =	 {The Journal of Chemical Physics},
  volume =	 142,
  number =	 10,
  pages =	 104703,
  year =	 2015,
  doi =		 {10.1063/1.4914093},
  url =		 {http://dx.doi.org/10.1063/1.4914093},
  date_added =	 {Sat Oct 24 10:57:22 2015},
}

")
      (re-search-backward "xu-2015")
      (org-ref-bibtex-previous-entry)
      (buffer-substring (line-beginning-position) (line-end-position)))))
#+END_SRC

#+RESULTS: prev-entry-1
: t



















** Get/set bibtex keys
#+name: get-bibtex-keys
#+BEGIN_SRC emacs-lisp :test
(should
   (equal
    '("DESC0004031" "early-career" "orgmode" "Data sharing ")
    (with-temp-buffer
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of Effective Data Sharing in Scientific Publishing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}

@article{xu-2015-relat,
  author =	 {Zhongnan Xu and John R. Kitchin},
  title =	 {Relationships Between the Surface Electronic and Chemical
                  Properties of Doped 4d and 5d Late Transition Metal Dioxides},
  keywords =	 {orgmode},
  journal =	 {The Journal of Chemical Physics},
  volume =	 142,
  number =	 10,
  pages =	 104703,
  year =	 2015,
  doi =		 {10.1063/1.4914093},
  url =		 {http://dx.doi.org/10.1063/1.4914093},
  date_added =	 {Sat Oct 24 10:57:22 2015},
}

")
      (org-ref-bibtex-keywords))))
#+END_SRC

#+RESULTS: get-bibtex-keys
: t




















#+name: set-bibtex-keys
#+BEGIN_SRC emacs-lisp :test
(should
   (equal
    '("key1" "key2" "orgmode")
    (with-temp-buffer
      (insert "@article{xu-2015-relat,
  author =	 {Zhongnan Xu and John R. Kitchin},
  title =	 {Relationships Between the Surface Electronic and Chemical
                  Properties of Doped 4d and 5d Late Transition Metal Dioxides},
  keywords =	 {orgmode},
  journal =	 {The Journal of Chemical Physics},
  volume =	 142,
  number =	 10,
  pages =	 104703,
  year =	 2015,
  doi =		 {10.1063/1.4914093},
  url =		 {http://dx.doi.org/10.1063/1.4914093},
  date_added =	 {Sat Oct 24 10:57:22 2015},
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (org-ref-set-bibtex-keywords '("key1" "key2"))
      (org-ref-bibtex-keywords))))
#+END_SRC

#+RESULTS: set-bibtex-keys
: t

























#+name: clean-year-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "2015"
    (with-temp-buffer
      (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of effective data sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 {0},
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (orcb-clean-year "2015")
      (bibtex-autokey-get-field "year"))))
#+END_SRC

#+RESULTS: clean-year-1
: t


















#+name: clean-year-2
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "2015"
    (with-temp-buffer
      (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of effective data sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 {2015},
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (orcb-clean-year "2014")
      (bibtex-autokey-get-field "year"))))
#+END_SRC

#+RESULTS: clean-year-2
: t


















#+name: clean-&
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "Examples of \\& effective data sharing"
    (with-temp-buffer
      (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of & effective data sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 {2015},
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (orcb-&)
      (bibtex-autokey-get-field "title"))))
#+END_SRC

#+RESULTS: clean-&
: t


















#+name: clean-comma
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "@article{kitchin-2015-examp,"
    (with-temp-buffer
      (insert "@article{kitchin-2015-examp
  author =	 {Kitchin, John R.},
  title =	 {Examples of & effective data sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 {2015},
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (orcb-key-comma)
      (buffer-substring-no-properties (point-min)
				      (line-end-position)))))
#+END_SRC

#+RESULTS: clean-comma
: t


















#+name: clean-pages-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "123456789"
    (with-temp-buffer
      (insert "@article{kitchin-2015-examp
  author =	 {Kitchin, John R.},
  title =	 {Examples of & effective data sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {},
  eid = {123456789},
  year =	 {2015},
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (orcb-clean-pages)
      (bibtex-autokey-get-field "pages"))))
#+END_SRC

#+RESULTS: clean-pages-1
: t


















#+name: clean-doi-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "10.1021/acscatal.5b00538"
    (with-temp-buffer
      (insert "@article{kitchin-2015-examp
  author =	 {Kitchin, John R.},
  title =	 {Examples of & effective data sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {},
  eid = {123456789},
  year =	 {2015},
  doi =		 {http://dx.doi.org/10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (orcb-clean-doi)
      (bibtex-autokey-get-field "doi"))))
#+END_SRC

#+RESULTS: clean-doi-1
: t



















** bibtex functionality

We rely a lot on bibtex functionality. These are tests to make sure it works as
we expect. I don't have clear evidence, but I feel like I have had trouble with
the in the past.

#+name: bib-1
#+BEGIN_SRC emacs-lisp :test
"test finding an entry in a temp-buffer"
  (should
   (= 1 (with-temp-buffer
	  (insert "@article{rippmann-2013-rethin,
  author =	 {Matthias Rippmann and Philippe Block},
  title =	 {Rethinking Structural Masonry: Unreinforced, Stone-Cut Shells},
  journal =	 {Proceedings of the ICE - Construction Materials},
  volume =	 166,
  number =	 6,
  pages =	 {378-389},
  year =	 2013,
  doi =		 {10.1680/coma.12.00033},
  url =		 {http://dx.doi.org/10.1680/coma.12.00033},
  date_added =	 {Mon Jun 1 09:11:23 2015},
}")
	  (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	  (bibtex-search-entry "rippmann-2013-rethin"))))
#+END_SRC

#+RESULTS: bib-1
: t




















#+name: bib-1a
#+BEGIN_SRC emacs-lisp :test
"Test finding an entry from an existing file."
(should
 (not (null
       (with-temp-buffer
	 (insert-file-contents (expand-file-name
				"tests/test-1.bib"
				(file-name-directory
				 (locate-library "org-ref"))))
	 (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	 (bibtex-search-entry "kitchin-2015-examp")))))
#+END_SRC

#+RESULTS: bib-1a
: t




















#+name: bib-2
#+BEGIN_SRC emacs-lisp :test
"Test for null entry"
(should
 (null (with-temp-buffer
	 (insert-file-contents (expand-file-name
				"tests/test-1.bib"
				(file-name-directory
				 (locate-library "org-ref"))))
	 (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	 (bibtex-search-entry "bad-key"))))
#+END_SRC

#+RESULTS: bib-2
: t




















* Test labels









#+name: get-labels-5
#+BEGIN_SRC emacs-lisp :test
(should
   (= 5
      (length
       (org-test-with-temp-text
	"* header
  :PROPERTIES:
  :CUSTOM_ID: test
  :END:

#+name: one
| 3 |

** subsection <<three>>
  :PROPERTIES:
  :CUSTOM_ID: two
  :END:

label:four
"
	(org-ref-get-labels)))))
#+END_SRC

#+RESULTS: get-labels-5
: t



** bad cites/labels/refs







#+name: bad-ref
#+BEGIN_SRC emacs-lisp :test
(should
   (= 5
      (length
       (org-test-with-temp-text
	   "ref:bad1  ref:bad2 eqref:bad3 pageref:bad4 nameref:bad5"
	 (org-ref-bad-ref-candidates)))))
#+END_SRC

#+RESULTS: bad-ref
: t








#+name: bad-file-link
#+BEGIN_SRC emacs-lisp :test
(should
   (= 5
      (length
       (org-test-with-temp-text
	"
file:not.here  [[./or.here]].

We should catch  \\attachfile{latex.style} too.

Why don't we catch [[attachfile:filepath]] or attachfile:some.file?
I think they must be defined in jmax, and are unknown links if it is
not loaded.
"
	(org-add-link-type "attachfile" nil nil)
	(org-ref-bad-file-link-candidates)))))
#+END_SRC

#+RESULTS: bad-file-link
: t











* Delete/replace keys







#+name: sort-by-year
#+BEGIN_SRC emacs-lisp :test
(should
 (string= (format
	   "cite:kitchin-2004-role,kitchin-2008-alloy

bibliography:%s
"
	   (expand-file-name
	    "tests/test-1.bib"
	    (file-name-directory (locate-library "org-ref"))))
	  (org-test-with-temp-text
	      (format
	       "cite:kitchin-2008-alloy,kitchin-2004-role

bibliography:%s
"
	       (expand-file-name
		"tests/test-1.bib"
		(file-name-directory (locate-library "org-ref"))))
	    (org-ref-sort-citation-link)
	    (buffer-string))))
#+END_SRC

#+RESULTS: sort-by-year
: t









* exports

#+name: cite-export-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "\\cite{kitchin-2008-alloy}
"
    (org-export-string-as "cite:kitchin-2008-alloy" 'latex t)))
#+END_SRC

#+RESULTS: cite-export-1
: t



















#+name: cite-export-2
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "\\cite[page 2]{kitchin-2008-alloy}
"
    (org-export-string-as "[[cite:page 2;@kitchin-2008-alloy]]" 'latex t)))
#+END_SRC

#+RESULTS: cite-export-2
: t














#+name: cite-export-3
#+BEGIN_SRC emacs-lisp :test
(should
 (string=
  "\\cite[page 2][post text]{kitchin-2008-alloy}
"
  (org-export-string-as  "[[cite:page 2;@kitchin-2008-alloy;post text]]" 'latex t)))
#+END_SRC

#+RESULTS: cite-export-3
: t















** labels
#+name: label-export-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "\\label{test}
"
    (org-export-string-as "label:test" 'latex t))))
#+END_SRC

#+RESULTS: label-export-1
: t















** ref
#+name: ref-export-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "\\ref{test}
"
    (org-export-string-as "ref:test" 'latex t)))
#+END_SRC

#+RESULTS: ref-export-1
: t











* org-ref-glossary

#+name: curly-1
#+BEGIN_SRC emacs-lisp :test
(should
   (= 2
      (org-test-with-temp-text
	  "{}"
	(require 'org-ref-glossary)
	(or-find-closing-curly-bracket))))
#+END_SRC

#+RESULTS: curly-1
: t




















#+name: curly-2
#+BEGIN_SRC emacs-lisp :test
(should
   (= 4
      (org-test-with-temp-text
	  "{{}}"
	(require 'org-ref-glossary)
	(or-find-closing-curly-bracket))))
#+END_SRC

#+RESULTS: curly-2
: t




















#+name: curly-3
#+BEGIN_SRC emacs-lisp :test
(should
   (= 3
      (org-test-with-temp-text
	  "{{}}"
	(require 'org-ref-glossary)
	(goto-char 2)
	(or-find-closing-curly-bracket))))
#+END_SRC

#+RESULTS: curly-3
: t







* Font-lock code test
These are not really good tests. The next-link functions have a while loop in them, so they end up going to the end of the buffer. These mostly check that no errors are raised.

** cite links
#+name: fl-next-cite
#+BEGIN_SRC emacs-lisp :test
(org-test-with-temp-text
    "   cite:kitchin-2015-examp

bibliography:tests/test-1.bib
"
  (goto-char (point-min))
  (if (fboundp 'org-link-set-parameters)
      t
    (org-ref-match-next-cite-link nil)
    (should
     (= 27 (point)))))
#+END_SRC

#+RESULTS: fl-next-cite
: t















#+name: cite-face-1
#+BEGIN_SRC emacs-lisp :test
(org-test-with-temp-text
    "cite:kitchin-2015-examp

bibliography:tests/test-1.bib
"
  (unless (fboundp 'org-link-set-parameters)
    (font-lock-add-keywords
     nil
     '((org-ref-match-next-cite-link (0  'org-ref-cite-face t))
       (org-ref-match-next-label-link (0  'org-ref-label-face t))
       (org-ref-match-next-ref-link (0  'org-ref-ref-face t))
       (org-ref-match-next-bibliography-link (0  'org-link t))
       (org-ref-match-next-bibliographystyle-link (0  'org-link t)))
     t))
  (org-mode)
  (font-lock-fontify-region (point-min) (point-max))
  (should (eq 'org-ref-cite-face (get-char-property 1 'face))))
#+END_SRC

#+RESULTS: cite-face-1
: t






#+name: cite-face-2
#+BEGIN_SRC emacs-lisp :test
(org-test-with-temp-text
    "# cite:kitchin-2015-examp

bibliography:tests/test-1.bib
"
  (unless (fboundp 'org-link-set-parameters)
    (font-lock-add-keywords
     nil
     '((org-ref-match-next-cite-link (0  'org-ref-cite-face t)))
     t))
  (font-lock-fontify-region (point-min) (point-max))
  (should (not (eq 'org-ref-cite-face (get-char-property 5 'face)))))
#+END_SRC

#+RESULTS: cite-face-2
: t






#+name: cite-in-comment
#+BEGIN_SRC emacs-lisp :test
(should
 (org-test-with-temp-text
     "# cite:kitchin-2015-examp

bibliography:tests/test-1.bib
"
   (font-lock-fontify-region (point-min) (point-max))
   (eq 'font-lock-comment-face (get-char-property 10 'face))))
#+END_SRC

#+RESULTS: cite-in-comment
: t







** ref links

#+name: fl-next-ref
#+BEGIN_SRC emacs-lisp :test
(org-test-with-temp-text
    "   ref:one
"
  (goto-char (point-min))
  (if (fboundp 'org-link-set-parameters)
      t
    (org-ref-match-next-ref-link nil)
    (should
     (= 11 (point)))))
#+END_SRC

#+RESULTS: fl-next-ref
: t





# #+name: ref-face-2
# #+BEGIN_SRC emacs-lisp :test
# (org-test-with-temp-text
#     " ref:kitchin-2015-examp

# label:kitchin-2015-examp

# bibliography:tests/test-1.bib
# "
#   (unless (fboundp 'org-link-set-parameters)
#     (font-lock-add-keywords
#      nil
#      '((org-ref-match-next-ref-link (0  'font-lock-warning-face t)))
#      t))
#   (font-lock-fontify-region (point-min) (point-max))
#   (should (eq 'org-ref-ref-face (get-char-property 2 'face))))
# #+END_SRC

# #+RESULTS: ref-face-2
# : t





** labels links

#+name: fl-next-label
#+BEGIN_SRC emacs-lisp :test
(org-test-with-temp-text
    "   label:one
"
  (if (fboundp 'org-link-set-parameters)
      t
    (goto-char (point-min))
    (org-ref-match-next-label-link nil)
    (should
     (= 13 (point)))))
#+END_SRC

#+RESULTS: fl-next-label
: t



















#+name: label-face
#+BEGIN_SRC emacs-lisp :test
(org-test-with-temp-text
    "label:kitchin-2015-examp

bibliography:tests/test-1.bib
"
  (if (fboundp 'org-link-set-parameters)
      t
    (font-lock-add-keywords
     nil
     '((org-ref-match-next-label-link (0  'org-ref-label-face t)))
     t)
    (font-lock-fontify-region (point-min) (point-max))
    (should (eq 'org-ref-label-face (get-char-property 2 'face)))))
#+END_SRC

#+RESULTS: label-face
: t








** bibliography and bibliographystyle links

#+name: fl-next-bib
#+BEGIN_SRC emacs-lisp :test
(org-test-with-temp-text
    "   bibliography:one

stuff
"
  (if (fboundp 'org-link-set-parameters)
      t
    (goto-char (point-min))
    (org-ref-match-next-bibliography-link nil)
    (should
     (= 20 (point)))))
#+END_SRC

#+RESULTS: fl-next-bib
: t







#+name: fl-next-bibstyle
#+BEGIN_SRC emacs-lisp :test
(org-test-with-temp-text
    "   bibliographystyle:one

cite
"
  (if (fboundp 'org-link-set-parameters)
      t
    (goto-char (point-min))
    (org-ref-match-next-bibliographystyle-link nil)
    (should
     (= 25 (point)))))
#+END_SRC

#+RESULTS: fl-next-bibstyle
: t
